#############################################
##### Testing
#############################################

set(prefix "${MODULE}")

add_test(
    NAME ${prefix}_can_Run
    COMMAND ${APPLICATION}
)
set_tests_properties (${prefix}_can_Run PROPERTIES
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Detect_Incorrect_Number
    COMMAND ${APPLICATION} 0 -4
)
set_tests_properties (${prefix}_can_Detect_Incorrect_Number PROPERTIES
    PASS_REGULAR_EXPRESSION "Number must be positive!"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_Check_Number_Format
    COMMAND ${APPLICATION} q q
)
set_tests_properties (${prefix}_Check_Number_Format PROPERTIES
    PASS_REGULAR_EXPRESSION "Wrong number format!"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_Check_Number_Of_Arguments
    COMMAND ${APPLICATION} 1 2 3
)
set_tests_properties (${prefix}_Check_Number_Of_Arguments PROPERTIES
    PASS_REGULAR_EXPRESSION "ERROR: Should be 3 arguments."
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Find_2_1_combinations
    COMMAND ${APPLICATION} 2 1
)
set_tests_properties (${prefix}_can_Find_2_1_combinations PROPERTIES
    PASS_REGULAR_EXPRESSION 
        "N = 2\nM = 1\n1: 1 2 \n2: 2 1 \n"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Find_3_1_combinations
    COMMAND ${APPLICATION} 3 1
)
set_tests_properties (${prefix}_can_Find_3_1_combinations PROPERTIES
    PASS_REGULAR_EXPRESSION 
        "N = 3\nM = 1\n1: 1 2 3 \n2: 1 3 2 \n3: 2 1 3 \n4: 2 3 1 \n5: 3 1 2 \n6: 3 2 1 \n"
    LABELS "${MODULE}")
